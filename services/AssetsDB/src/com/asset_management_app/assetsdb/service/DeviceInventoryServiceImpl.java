/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.asset_management_app.assetsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.asset_management_app.assetsdb.DeviceInventory;
import com.asset_management_app.assetsdb.Requested;


/**
 * ServiceImpl object for domain model class DeviceInventory.
 *
 * @see DeviceInventory
 */
@Service("AssetsDB.DeviceInventoryService")
@Validated
public class DeviceInventoryServiceImpl implements DeviceInventoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceInventoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AssetsDB.RequestedService")
    private RequestedService requestedService;

    @Autowired
    @Qualifier("AssetsDB.DeviceInventoryDao")
    private WMGenericDao<DeviceInventory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<DeviceInventory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory create(DeviceInventory deviceInventory) {
        LOGGER.debug("Creating a new DeviceInventory with information: {}", deviceInventory);

        DeviceInventory deviceInventoryCreated = this.wmGenericDao.create(deviceInventory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(deviceInventoryCreated);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory getById(Integer deviceinventoryId) {
        LOGGER.debug("Finding DeviceInventory by id: {}", deviceinventoryId);
        return this.wmGenericDao.findById(deviceinventoryId);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory findById(Integer deviceinventoryId) {
        LOGGER.debug("Finding DeviceInventory by id: {}", deviceinventoryId);
        try {
            return this.wmGenericDao.findById(deviceinventoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DeviceInventory found with id: {}", deviceinventoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public List<DeviceInventory> findByMultipleIds(List<Integer> deviceinventoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding DeviceInventories by ids: {}", deviceinventoryIds);

        return this.wmGenericDao.findByMultipleIds(deviceinventoryIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory getByModelId(String modelId) {
        Map<String, Object> modelIdMap = new HashMap<>();
        modelIdMap.put("modelId", modelId);

        LOGGER.debug("Finding DeviceInventory by unique keys: {}", modelIdMap);
        return this.wmGenericDao.findByUniqueKey(modelIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory update(DeviceInventory deviceInventory) {
        LOGGER.debug("Updating DeviceInventory with information: {}", deviceInventory);

        this.wmGenericDao.update(deviceInventory);
        this.wmGenericDao.refresh(deviceInventory);

        return deviceInventory;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory partialUpdate(Integer deviceinventoryId, Map<String, Object>deviceInventoryPatch) {
        LOGGER.debug("Partially Updating the DeviceInventory with id: {}", deviceinventoryId);

        DeviceInventory deviceInventory = getById(deviceinventoryId);

        try {
            ObjectReader deviceInventoryReader = this.objectMapper.reader().forType(DeviceInventory.class).withValueToUpdate(deviceInventory);
            deviceInventory = deviceInventoryReader.readValue(this.objectMapper.writeValueAsString(deviceInventoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", deviceInventoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        deviceInventory = update(deviceInventory);

        return deviceInventory;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public DeviceInventory delete(Integer deviceinventoryId) {
        LOGGER.debug("Deleting DeviceInventory with id: {}", deviceinventoryId);
        DeviceInventory deleted = this.wmGenericDao.findById(deviceinventoryId);
        if (deleted == null) {
            LOGGER.debug("No DeviceInventory found with id: {}", deviceinventoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), DeviceInventory.class.getSimpleName(), deviceinventoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public void delete(DeviceInventory deviceInventory) {
        LOGGER.debug("Deleting DeviceInventory with {}", deviceInventory);
        this.wmGenericDao.delete(deviceInventory);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<DeviceInventory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DeviceInventories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<DeviceInventory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DeviceInventories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AssetsDB for table DeviceInventory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AssetsDB for table DeviceInventory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<Requested> findAssociatedRequesteds(Integer deviceId, Pageable pageable) {
        LOGGER.debug("Fetching all associated requesteds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("deviceInventory.deviceId = '" + deviceId + "'");

        return requestedService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RequestedService instance
     */
    protected void setRequestedService(RequestedService service) {
        this.requestedService = service;
    }

}