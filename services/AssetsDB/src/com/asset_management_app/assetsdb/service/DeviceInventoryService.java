/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.asset_management_app.assetsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.asset_management_app.assetsdb.DeviceInventory;
import com.asset_management_app.assetsdb.Requested;

/**
 * Service object for domain model class {@link DeviceInventory}.
 */
public interface DeviceInventoryService {

    /**
     * Creates a new DeviceInventory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DeviceInventory if any.
     *
     * @param deviceInventory Details of the DeviceInventory to be created; value cannot be null.
     * @return The newly created DeviceInventory.
     */
    DeviceInventory create(@Valid DeviceInventory deviceInventory);


	/**
     * Returns DeviceInventory by given id if exists.
     *
     * @param deviceinventoryId The id of the DeviceInventory to get; value cannot be null.
     * @return DeviceInventory associated with the given deviceinventoryId.
	 * @throws EntityNotFoundException If no DeviceInventory is found.
     */
    DeviceInventory getById(Integer deviceinventoryId);

    /**
     * Find and return the DeviceInventory by given id if exists, returns null otherwise.
     *
     * @param deviceinventoryId The id of the DeviceInventory to get; value cannot be null.
     * @return DeviceInventory associated with the given deviceinventoryId.
     */
    DeviceInventory findById(Integer deviceinventoryId);

	/**
     * Find and return the list of DeviceInventories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param deviceinventoryIds The id's of the DeviceInventory to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return DeviceInventories associated with the given deviceinventoryIds.
     */
    List<DeviceInventory> findByMultipleIds(List<Integer> deviceinventoryIds, boolean orderedReturn);

    /**
     * Find and return the DeviceInventory for given modelId  if exists.
     *
     * @param modelId value of modelId; value cannot be null.
     * @return DeviceInventory associated with the given inputs.
     * @throws EntityNotFoundException if no matching DeviceInventory found.
     */
    DeviceInventory getByModelId(String modelId);

    /**
     * Updates the details of an existing DeviceInventory. It replaces all fields of the existing DeviceInventory with the given deviceInventory.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DeviceInventory if any.
     *
     * @param deviceInventory The details of the DeviceInventory to be updated; value cannot be null.
     * @return The updated DeviceInventory.
     * @throws EntityNotFoundException if no DeviceInventory is found with given input.
     */
    DeviceInventory update(@Valid DeviceInventory deviceInventory);


    /**
     * Partially updates the details of an existing DeviceInventory. It updates only the
     * fields of the existing DeviceInventory which are passed in the deviceInventoryPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DeviceInventory if any.
     *
     * @param deviceinventoryId The id of the DeviceInventory to be deleted; value cannot be null.
     * @param deviceInventoryPatch The partial data of DeviceInventory which is supposed to be updated; value cannot be null.
     * @return The updated DeviceInventory.
     * @throws EntityNotFoundException if no DeviceInventory is found with given input.
     */
    DeviceInventory partialUpdate(Integer deviceinventoryId, Map<String, Object> deviceInventoryPatch);

    /**
     * Deletes an existing DeviceInventory with the given id.
     *
     * @param deviceinventoryId The id of the DeviceInventory to be deleted; value cannot be null.
     * @return The deleted DeviceInventory.
     * @throws EntityNotFoundException if no DeviceInventory found with the given id.
     */
    DeviceInventory delete(Integer deviceinventoryId);

    /**
     * Deletes an existing DeviceInventory with the given object.
     *
     * @param deviceInventory The instance of the DeviceInventory to be deleted; value cannot be null.
     */
    void delete(DeviceInventory deviceInventory);

    /**
     * Find all DeviceInventories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DeviceInventories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<DeviceInventory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all DeviceInventories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DeviceInventories.
     *
     * @see Pageable
     * @see Page
     */
    Page<DeviceInventory> findAll(String query, Pageable pageable);

    /**
     * Exports all DeviceInventories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all DeviceInventories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the DeviceInventories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the DeviceInventory.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated requesteds for given DeviceInventory id.
     *
     * @param deviceId value of deviceId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Requested instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Requested> findAssociatedRequesteds(Integer deviceId, Pageable pageable);

}