/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.asset_management_app.assetsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.asset_management_app.assetsdb.Requested;


/**
 * ServiceImpl object for domain model class Requested.
 *
 * @see Requested
 */
@Service("AssetsDB.RequestedService")
@Validated
public class RequestedServiceImpl implements RequestedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RequestedServiceImpl.class);


    @Autowired
    @Qualifier("AssetsDB.RequestedDao")
    private WMGenericDao<Requested, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Requested, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public Requested create(Requested requested) {
        LOGGER.debug("Creating a new Requested with information: {}", requested);

        Requested requestedCreated = this.wmGenericDao.create(requested);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(requestedCreated);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Requested getById(Integer requestedId) {
        LOGGER.debug("Finding Requested by id: {}", requestedId);
        return this.wmGenericDao.findById(requestedId);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Requested findById(Integer requestedId) {
        LOGGER.debug("Finding Requested by id: {}", requestedId);
        try {
            return this.wmGenericDao.findById(requestedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Requested found with id: {}", requestedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public List<Requested> findByMultipleIds(List<Integer> requestedIds, boolean orderedReturn) {
        LOGGER.debug("Finding Requesteds by ids: {}", requestedIds);

        return this.wmGenericDao.findByMultipleIds(requestedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AssetsDBTransactionManager")
    @Override
    public Requested update(Requested requested) {
        LOGGER.debug("Updating Requested with information: {}", requested);

        this.wmGenericDao.update(requested);
        this.wmGenericDao.refresh(requested);

        return requested;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public Requested partialUpdate(Integer requestedId, Map<String, Object>requestedPatch) {
        LOGGER.debug("Partially Updating the Requested with id: {}", requestedId);

        Requested requested = getById(requestedId);

        try {
            ObjectReader requestedReader = this.objectMapper.reader().forType(Requested.class).withValueToUpdate(requested);
            requested = requestedReader.readValue(this.objectMapper.writeValueAsString(requestedPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", requestedPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        requested = update(requested);

        return requested;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public Requested delete(Integer requestedId) {
        LOGGER.debug("Deleting Requested with id: {}", requestedId);
        Requested deleted = this.wmGenericDao.findById(requestedId);
        if (deleted == null) {
            LOGGER.debug("No Requested found with id: {}", requestedId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Requested.class.getSimpleName(), requestedId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AssetsDBTransactionManager")
    @Override
    public void delete(Requested requested) {
        LOGGER.debug("Deleting Requested with {}", requested);
        this.wmGenericDao.delete(requested);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<Requested> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Requesteds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<Requested> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Requesteds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AssetsDB for table Requested to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AssetsDB for table Requested to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AssetsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}