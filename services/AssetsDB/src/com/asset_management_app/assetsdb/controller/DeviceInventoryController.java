/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.asset_management_app.assetsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.asset_management_app.assetsdb.DeviceInventory;
import com.asset_management_app.assetsdb.Requested;
import com.asset_management_app.assetsdb.service.DeviceInventoryService;


/**
 * Controller object for domain model class DeviceInventory.
 * @see DeviceInventory
 */
@RestController("AssetsDB.DeviceInventoryController")
@Api(value = "DeviceInventoryController", description = "Exposes APIs to work with DeviceInventory resource.")
@RequestMapping("/AssetsDB/DeviceInventory")
public class DeviceInventoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceInventoryController.class);

    @Autowired
	@Qualifier("AssetsDB.DeviceInventoryService")
	private DeviceInventoryService deviceInventoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DeviceInventory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeviceInventory createDeviceInventory(@RequestBody DeviceInventory deviceInventory) {
		LOGGER.debug("Create DeviceInventory with information: {}" , deviceInventory);

		deviceInventory = deviceInventoryService.create(deviceInventory);
		LOGGER.debug("Created DeviceInventory with information: {}" , deviceInventory);

	    return deviceInventory;
	}

    @ApiOperation(value = "Returns the DeviceInventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeviceInventory getDeviceInventory(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DeviceInventory with id: {}" , id);

        DeviceInventory foundDeviceInventory = deviceInventoryService.getById(id);
        LOGGER.debug("DeviceInventory details with id: {}" , foundDeviceInventory);

        return foundDeviceInventory;
    }

    @ApiOperation(value = "Updates the DeviceInventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeviceInventory editDeviceInventory(@PathVariable("id") Integer id, @RequestBody DeviceInventory deviceInventory) {
        LOGGER.debug("Editing DeviceInventory with id: {}" , deviceInventory.getDeviceId());

        deviceInventory.setDeviceId(id);
        deviceInventory = deviceInventoryService.update(deviceInventory);
        LOGGER.debug("DeviceInventory details with id: {}" , deviceInventory);

        return deviceInventory;
    }
    
    @ApiOperation(value = "Partially updates the DeviceInventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeviceInventory patchDeviceInventory(@PathVariable("id") Integer id, @RequestBody @MapTo(DeviceInventory.class) Map<String, Object> deviceInventoryPatch) {
        LOGGER.debug("Partially updating DeviceInventory with id: {}" , id);

        DeviceInventory deviceInventory = deviceInventoryService.partialUpdate(id, deviceInventoryPatch);
        LOGGER.debug("DeviceInventory details after partial update: {}" , deviceInventory);

        return deviceInventory;
    }

    @ApiOperation(value = "Deletes the DeviceInventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDeviceInventory(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DeviceInventory with id: {}" , id);

        DeviceInventory deletedDeviceInventory = deviceInventoryService.delete(id);

        return deletedDeviceInventory != null;
    }

    @RequestMapping(value = "/modelId/{modelId}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching DeviceInventory with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeviceInventory getByModelId(@PathVariable("modelId") String modelId) {
        LOGGER.debug("Getting DeviceInventory with uniques key ModelId");
        return deviceInventoryService.getByModelId(modelId);
    }

    /**
     * @deprecated Use {@link #findDeviceInventories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DeviceInventory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DeviceInventory> searchDeviceInventoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DeviceInventories list by query filter:{}", (Object) queryFilters);
        return deviceInventoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DeviceInventory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeviceInventory> findDeviceInventories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DeviceInventories list by filter:", query);
        return deviceInventoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DeviceInventory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DeviceInventory> filterDeviceInventories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DeviceInventories list by filter", query);
        return deviceInventoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportDeviceInventories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return deviceInventoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDeviceInventoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DeviceInventory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> deviceInventoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DeviceInventory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countDeviceInventories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DeviceInventories");
		return deviceInventoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getDeviceInventoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return deviceInventoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/requesteds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the requesteds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Requested> findAssociatedRequesteds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated requesteds");
        return deviceInventoryService.findAssociatedRequesteds(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeviceInventoryService instance
	 */
	protected void setDeviceInventoryService(DeviceInventoryService service) {
		this.deviceInventoryService = service;
	}

}